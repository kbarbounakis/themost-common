{"version":3,"sources":["config.es6.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport _ from \"lodash\";\nimport \"source-map-support/register\";\nimport Symbol from \"symbol\";\nimport {AbstractClassError} from \"./errors\";\nimport {Args, PathUtils, TraceUtils} from \"./utils\";\n\nconst configProperty = Symbol(\"config\");\nconst currentConfiguration = Symbol(\"current\");\nconst configPathProperty = Symbol(\"configurationPath\");\nconst executionPathProperty = Symbol(\"executionPath\");\nconst strategiesProperty = Symbol(\"strategies\");\n\n/**\n * @class\n */\nexport class ConfigurationBase {\n    /**\n     * Gets the current configuration\n     * @returns ConfigurationBase - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static getCurrent() {\n        if (_.isNil(ConfigurationBase[currentConfiguration])) {\n            ConfigurationBase[currentConfiguration] = new ConfigurationBase();\n        }\n        return ConfigurationBase[currentConfiguration];\n    }\n\n    /**\n     * Sets the current configuration\n     * @param {ConfigurationBase} configuration\n     * @returns ConfigurationBase - An instance of ApplicationConfiguration class which represents the current configuration\n     */\n    static setCurrent(configuration) {\n        if (configuration instanceof ConfigurationBase) {\n            if (!configuration.hasStrategy(ModuleLoaderStrategy)) {\n                configuration.useStrategy(ModuleLoaderStrategy, DefaultModuleLoaderStrategy);\n            }\n            ConfigurationBase[currentConfiguration] = configuration;\n            return ConfigurationBase[currentConfiguration];\n        }\n        throw new TypeError(\"Invalid argument. Expected an instance of DataConfiguration class.\");\n    }\n\n    /**\n     * @constructor\n     * @param {string=} configPath\n     */\n    constructor(configPath) {\n\n        //init strategies\n        this[strategiesProperty] = {};\n\n        this[configPathProperty] = configPath || PathUtils.join(process.cwd(), \"config\");\n        TraceUtils.debug(\"Initializing configuration under %s.\", this[configPathProperty]);\n\n        this[executionPathProperty] = PathUtils.join(this[configPathProperty], \"..\");\n        TraceUtils.debug(\"Setting execution path under %s.\", this[executionPathProperty]);\n\n        //load default module loader strategy\n        this.useStrategy(ModuleLoaderStrategy, DefaultModuleLoaderStrategy);\n\n        //get configuration source\n        let configSourcePath;\n        try {\n            let env = \"production\";\n            //node.js mode\n            if (typeof process !== \"undefined\" && process.env) {\n                env = process.env.NODE_ENV || \"production\";\n            } else if (typeof window !== \"undefined\" && window.hasOwnProperty(\"env\")) {\n                /* tslint:disable:no-string-literal */\n                env = window[\"env\"].BROWSER_ENV || \"production\";\n                /* tslint:enable:no-string-literal */\n            }\n            configSourcePath = PathUtils.join(this[configPathProperty], \"app.\" + env + \".json\");\n            TraceUtils.debug(\"Validating environment configuration source on %s.\", configSourcePath);\n            this[configProperty] = require(configSourcePath);\n        } catch (err) {\n            if (err.code === \"MODULE_NOT_FOUND\") {\n                TraceUtils.log(\"The environment specific configuration cannot be found or is inaccesible.\");\n                try {\n                    configSourcePath = PathUtils.join(this[configPathProperty], \"app.json\");\n                    TraceUtils.debug(\"Validating application configuration source on %s.\", configSourcePath);\n                    this[configProperty] = require(configSourcePath);\n                } catch (err) {\n                    if (err.code === \"MODULE_NOT_FOUND\") {\n                        TraceUtils.log(\"The default application configuration cannot be found or is inaccesible.\");\n                    } else {\n                        TraceUtils.error(\"An error occured while trying to open default application configuration.\");\n                        TraceUtils.error(err);\n                    }\n                    TraceUtils.debug(\"Initializing empty configuration\");\n                    this[configProperty] = {};\n                }\n            } else {\n                TraceUtils.error(\"An error occured while trying to open application configuration.\");\n                TraceUtils.error(err);\n                //load default configuration\n                this[configProperty] = {};\n            }\n        }\n//initialize settings object\n        this[configProperty].settings = this[configProperty].settings || {};\n    }\n\n    /**\n     * Register a configuration strategy\n     * @param {Function|*} configStrategyCtor\n     * @param {Function|*} strategyCtor\n     * @returns ConfigurationBase\n     */\n    useStrategy(configStrategyCtor, strategyCtor) {\n        Args.notFunction(configStrategyCtor, \"Configuration strategy constructor\");\n        Args.notFunction(strategyCtor, \"Strategy constructor\");\n        this[strategiesProperty][`${configStrategyCtor.name}`] = new strategyCtor(this);\n        return this;\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function|*} configStrategyCtor\n     * @returns {ConfigurationStrategy|*}\n     */\n    getStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor, \"Configuration strategy constructor\");\n        return this[strategiesProperty][`${configStrategyCtor.name}`];\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function} configStrategyCtor\n     */\n    hasStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor, \"Configuration strategy constructor\");\n        return typeof this[strategiesProperty][`${configStrategyCtor.name}`] !== \"undefined\";\n    }\n\n    get settings() {\n        return this.getSourceAt(\"settings\");\n    }\n\n    /**\n     * Returns the configuration source object\n     * @returns {*}\n     */\n    getSource() {\n        return this[configProperty];\n    }\n\n    /**\n     * Returns the source configuration object based on the given path (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @returns {Object|Array}\n     */\n    getSourceAt(p) {\n        return _.at(this[configProperty], p.replace(/\\//g, \".\"))[0];\n    }\n\n    /**\n     * Returns a boolean which indicates whether the specified  object path exists or not (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @returns {boolean}\n     */\n    hasSourceAt(p) {\n        return _.isObject(_.at(this[configProperty], p.replace(/\\//g, \".\"))[0]);\n    }\n\n    /**\n     * Sets the config value to the specified object path (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @param {*} value\n     * @returns {Object}\n     */\n    setSourceAt(p, value) {\n        return _.set(this[configProperty], p.replace(/\\//g, \".\"), value);\n    }\n\n    /**\n     * Sets the current execution path\n     * @param {string} p\n     */\n    setExecutionPath(p) {\n        this[executionPathProperty] = p;\n        return this;\n    }\n\n    /**\n     * Gets the current execution path\n     * @returns {string}\n     */\n    getExecutionPath() {\n        return this[executionPathProperty];\n    }\n\n    /**\n     * Gets the current configuration path\n     * @returns {string}\n     */\n    getConfigurationPath() {\n        return this[configPathProperty];\n    }\n}\n\n/**\n * @class\n */\nexport class ConfigurationStrategy {\n    /**\n     * @constructor\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        Args.check(new.target !== ConfigurationStrategy, new AbstractClassError());\n        Args.notNull(config, \"Configuration\");\n        this[configProperty] = config;\n\n    }\n\n    /**\n     * @returns {ConfigurationBase}\n     */\n    getConfiguration() {\n        return this[configProperty];\n    }\n\n}\n\nexport class ModuleLoaderStrategy extends ConfigurationStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n\n    /**\n     * @param {string} modulePath\n     * @returns {*}\n     */\n    require(modulePath) {\n        Args.notEmpty(modulePath, \"Module Path\");\n        if (!/^.\\//i.test(modulePath)) {\n            //load module which is not starting with ./\n            return require(modulePath);\n        }\n        return require(PathUtils.join(this.getConfiguration().getExecutionPath(), modulePath));\n    }\n\n}\n\nexport class DefaultModuleLoaderStrategy extends ModuleLoaderStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n}\n"]}