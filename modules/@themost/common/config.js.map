{"version":3,"sources":["config.js"],"names":["_","Symbol","AbstractClassError","Args","PathUtils","TraceUtils","configProperty","currentConfiguration","configPathProperty","executionPathProperty","strategiesProperty","ConfigurationBase","isNil","configuration","hasStrategy","ModuleLoaderStrategy","useStrategy","DefaultModuleLoaderStrategy","TypeError","configPath","join","process","cwd","debug","configSourcePath","env","NODE_ENV","window","hasOwnProperty","BROWSER_ENV","require","err","code","log","error","settings","configStrategyCtor","strategyCtor","notFunction","name","p","at","replace","isObject","value","set","getSourceAt","ConfigurationStrategy","config","check","new","target","notNull","modulePath","notEmpty","test","getConfiguration","getExecutionPath"],"mappings":"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","file":"config.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport _ from \"lodash\";\nimport \"source-map-support/register\";\nimport Symbol from \"symbol\";\nimport {AbstractClassError} from \"../errors\";\nimport {Args, PathUtils, TraceUtils} from \"../utils\";\n\nconst configProperty = Symbol(\"config\");\nconst currentConfiguration = Symbol(\"current\");\nconst configPathProperty = Symbol(\"configurationPath\");\nconst executionPathProperty = Symbol(\"executionPath\");\nconst strategiesProperty = Symbol(\"strategies\");\n\n/**\n * @class\n */\nexport class ConfigurationBase {\n    /**\n     * Gets the current configuration\n     * @returns ConfigurationBase - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static getCurrent() {\n        if (_.isNil(ConfigurationBase[currentConfiguration])) {\n            ConfigurationBase[currentConfiguration] = new ConfigurationBase();\n        }\n        return ConfigurationBase[currentConfiguration];\n    }\n\n    /**\n     * Sets the current configuration\n     * @param {ConfigurationBase} configuration\n     * @returns ConfigurationBase - An instance of ApplicationConfiguration class which represents the current configuration\n     */\n    static setCurrent(configuration) {\n        if (configuration instanceof ConfigurationBase) {\n            if (!configuration.hasStrategy(ModuleLoaderStrategy)) {\n                configuration.useStrategy(ModuleLoaderStrategy, DefaultModuleLoaderStrategy);\n            }\n            ConfigurationBase[currentConfiguration] = configuration;\n            return ConfigurationBase[currentConfiguration];\n        }\n        throw new TypeError(\"Invalid argument. Expected an instance of DataConfiguration class.\");\n    }\n\n    /**\n     * @constructor\n     * @param {string=} configPath\n     */\n    constructor(configPath) {\n\n        //init strategies\n        this[strategiesProperty] = {};\n\n        this[configPathProperty] = configPath || PathUtils.join(process.cwd(), \"config\");\n        TraceUtils.debug(\"Initializing configuration under %s.\", this[configPathProperty]);\n\n        this[executionPathProperty] = PathUtils.join(this[configPathProperty], \"..\");\n        TraceUtils.debug(\"Setting execution path under %s.\", this[executionPathProperty]);\n\n        //load default module loader strategy\n        this.useStrategy(ModuleLoaderStrategy, DefaultModuleLoaderStrategy);\n\n        //get configuration source\n        let configSourcePath;\n        try {\n            let env = \"production\";\n            //node.js mode\n            if (typeof process !== \"undefined\" && process.env) {\n                env = process.env.NODE_ENV || \"production\";\n            } else if (typeof window !== \"undefined\" && window.hasOwnProperty(\"env\")) {\n                /* tslint:disable:no-string-literal */\n                env = window[\"env\"].BROWSER_ENV || \"production\";\n                /* tslint:enable:no-string-literal */\n            }\n            configSourcePath = PathUtils.join(this[configPathProperty], \"app.\" + env + \".json\");\n            TraceUtils.debug(\"Validating environment configuration source on %s.\", configSourcePath);\n            this[configProperty] = require(configSourcePath);\n        } catch (err) {\n            if (err.code === \"MODULE_NOT_FOUND\") {\n                TraceUtils.log(\"The environment specific configuration cannot be found or is inaccesible.\");\n                try {\n                    configSourcePath = PathUtils.join(this[configPathProperty], \"app.json\");\n                    TraceUtils.debug(\"Validating application configuration source on %s.\", configSourcePath);\n                    this[configProperty] = require(configSourcePath);\n                } catch (err) {\n                    if (err.code === \"MODULE_NOT_FOUND\") {\n                        TraceUtils.log(\"The default application configuration cannot be found or is inaccesible.\");\n                    } else {\n                        TraceUtils.error(\"An error occured while trying to open default application configuration.\");\n                        TraceUtils.error(err);\n                    }\n                    TraceUtils.debug(\"Initializing empty configuration\");\n                    this[configProperty] = {};\n                }\n            } else {\n                TraceUtils.error(\"An error occured while trying to open application configuration.\");\n                TraceUtils.error(err);\n                //load default configuration\n                this[configProperty] = {};\n            }\n        }\n//initialize settings object\n        this[configProperty].settings = this[configProperty].settings || {};\n    }\n\n    /**\n     * Register a configuration strategy\n     * @param {Function|*} configStrategyCtor\n     * @param {Function|*} strategyCtor\n     * @returns ConfigurationBase\n     */\n    useStrategy(configStrategyCtor, strategyCtor) {\n        Args.notFunction(configStrategyCtor, \"Configuration strategy constructor\");\n        Args.notFunction(strategyCtor, \"Strategy constructor\");\n        this[strategiesProperty][`${configStrategyCtor.name}`] = new strategyCtor(this);\n        return this;\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function|*} configStrategyCtor\n     * @returns {ConfigurationStrategy|*}\n     */\n    getStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor, \"Configuration strategy constructor\");\n        return this[strategiesProperty][`${configStrategyCtor.name}`];\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function} configStrategyCtor\n     */\n    hasStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor, \"Configuration strategy constructor\");\n        return typeof this[strategiesProperty][`${configStrategyCtor.name}`] !== \"undefined\";\n    }\n\n    get settings() {\n        return this.getSourceAt(\"settings\");\n    }\n\n    /**\n     * Returns the configuration source object\n     * @returns {*}\n     */\n    getSource() {\n        return this[configProperty];\n    }\n\n    /**\n     * Returns the source configuration object based on the given path (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @returns {Object|Array}\n     */\n    getSourceAt(p) {\n        return _.at(this[configProperty], p.replace(/\\//g, \".\"))[0];\n    }\n\n    /**\n     * Returns a boolean which indicates whether the specified  object path exists or not (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @returns {boolean}\n     */\n    hasSourceAt(p) {\n        return _.isObject(_.at(this[configProperty], p.replace(/\\//g, \".\"))[0]);\n    }\n\n    /**\n     * Sets the config value to the specified object path (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @param {*} value\n     * @returns {Object}\n     */\n    setSourceAt(p, value) {\n        return _.set(this[configProperty], p.replace(/\\//g, \".\"), value);\n    }\n\n    /**\n     * Sets the current execution path\n     * @param {string} p\n     */\n    setExecutionPath(p) {\n        this[executionPathProperty] = p;\n        return this;\n    }\n\n    /**\n     * Gets the current execution path\n     * @returns {string}\n     */\n    getExecutionPath() {\n        return this[executionPathProperty];\n    }\n\n    /**\n     * Gets the current configuration path\n     * @returns {string}\n     */\n    getConfigurationPath() {\n        return this[configPathProperty];\n    }\n}\n\n/**\n * @class\n */\nexport class ConfigurationStrategy {\n    /**\n     * @constructor\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        Args.check(new.target !== ConfigurationStrategy, new AbstractClassError());\n        Args.notNull(config, \"Configuration\");\n        this[configProperty] = config;\n\n    }\n\n    /**\n     * @returns {ConfigurationBase}\n     */\n    getConfiguration() {\n        return this[configProperty];\n    }\n\n}\n\nexport class ModuleLoaderStrategy extends ConfigurationStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n\n    /**\n     * @param {string} modulePath\n     * @returns {*}\n     */\n    require(modulePath) {\n        Args.notEmpty(modulePath, \"Module Path\");\n        if (!/^.\\//i.test(modulePath)) {\n            //load module which is not starting with ./\n            return require(modulePath);\n        }\n        return require(PathUtils.join(this.getConfiguration().getExecutionPath(), modulePath));\n    }\n\n}\n\nexport class DefaultModuleLoaderStrategy extends ModuleLoaderStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n}\n"]}