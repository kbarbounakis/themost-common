{"version":3,"sources":["errors.js"],"names":["_","Errors","ArgumentError","message","code","TypeError","AbstractMethodError","AbstractClassError","FileNotFoundError","Error","HttpError","err","status","innerMessage","finalStatus","find","x","title","statusCode","HttpBadRequestError","HttpNotFoundError","HttpMethodNotAllowedError","HttpNotAcceptableAllowedError","HttpRequestTimeoutError","HttpConflictError","HttpTokenExpiredError","HttpTokenRequiredError","HttpUnauthorizedError","HttpForbiddenError","HttpServerError","DataError","model","field","NotNullError","DataNotFoundError","UniqueConstraintError","constraint","AccessDeniedError"],"mappings":"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","file":"errors.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n\nimport _ from \"lodash\";\nimport {Errors} from \"./http-error-codes\";\n\n/**\n * @class\n * @augments TypeError\n */\nexport class ArgumentError extends TypeError {\n\n    constructor(message, code) {\n        super(message);\n        /**\n         * Gets or sets a string which may be used to identify this error e.g. ECHECK, ENULL etc\n         */\n        this.code = code || \"EARG\";\n    }\n}\n\n/**\n * @class\n * @augments TypeError\n */\nexport class AbstractMethodError extends TypeError {\n    constructor(message) {\n        super(message || \"Class does not implement inherited abstract method.\");\n    }\n}\n\n/**\n * @classdesc Abstract Class Exception\n * @class\n * @augments Error\n *\n */\nexport class AbstractClassError extends TypeError {\n    constructor(message) {\n        super(message || \"An abstract class cannot be instantiated.\");\n    }\n}\n\n/**\n * @class\n * @augments Error\n */\nexport class FileNotFoundError extends Error {\n    constructor(message) {\n        super(message || \"File not found\");\n    }\n}\n\n/**\n * @class\n * @augments Error\n */\nexport class HttpError extends Error {\n    /**\n     * @param {Error} err\n     * @returns {HttpError}\n     */\n    static create(err) {\n        if (typeof err === \"undefined\" || err === null) {\n            return new HttpError();\n        } else {\n            if (err.status) {\n                return new HttpError(err.status, err.message);\n            } else {\n                return new HttpError(500, err.message);\n            }\n        }\n    }\n\n    /**\n     * @constructor\n     * @param {number=} status\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(status, message, innerMessage) {\n        super(message);\n        const finalStatus = (typeof status === \"undefined\" || status === null) ? 500 : status;\n        const err = _.find(Errors, (x) => {\n            return (x.status === finalStatus);\n        });\n        if (err) {\n            this.title = err.title;\n            this.message = message || err.message;\n            this.statusCode = err.status;\n        } else {\n            /**\n             * Gets or sets a short title for this HTTP error (e.g. Not Found, Bad Request)\n             */\n            this.title = \"Internal Server Error\";\n            this.message = message || \"The server encountered an internal error and was unable to complete the request.\";\n            /**\n             * Gets or sets the status code if this HTTP error\n             */\n            this.statusCode = finalStatus;\n        }\n        /**\n         * Gets or sets an inner message for this HTTP error.\n         */\n        this.innerMessage = innerMessage;\n    }\n}\n\n/**\n * @classdesc HTTP 400 Bad Request exception class\n * @class\n */\nexport class HttpBadRequestError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(400, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 404 Not Found Exception class\n * @class\n * @augments HttpError\n */\nexport class HttpNotFoundError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(404, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 405 Method Not Allowed exception class\n * @class\n * @augments HttpError\n */\nexport class HttpMethodNotAllowedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(405, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 406 Not Acceptable exception class\n * @class\n * @augments HttpError\n */\nexport class HttpNotAcceptableAllowedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(406, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 408 RequestTimeout exception class\n * @class\n * @augments HttpError\n */\nexport class HttpRequestTimeoutError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(408, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 409 Conflict exception class\n * @class\n * @augments HttpError\n */\nexport class HttpConflictError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(409, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 498 Token Expired exception class\n * @class\n * @augments HttpError\n */\nexport class HttpTokenExpiredError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(498, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 499 Token Required exception class\n * @class\n * @augments HttpError\n */\nexport class HttpTokenRequiredError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(499, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 401 Unauthorized Exception class\n * @class\n * @augments HttpError\n */\nexport class HttpUnauthorizedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(401, message, innerMessage);\n    }\n}\n\n/**\n * HTTP 403 Forbidden Exception class\n * @class\n * @param {string=} message\n * @param {string=} innerMessage\n * @augments HttpError\n */\nexport class HttpForbiddenError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(403, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 500 Internal Server Error Exception class\n * @class\n * @augments HttpError\n */\nexport class HttpServerError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(500, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing exceptions on data operations\n * @class\n * @property {string} code - A string that represents an error code e.g. EDATA\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error.\n * @augments Error\n */\nexport class DataError extends Error {\n    /* @constructor\n     * @param {string=} code - A string that represents an error code\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} field - The target field\n     */\n    constructor(code, message, innerMessage, model, field) {\n        super();\n        this.code = code || \"EDATA\";\n        if (model) {\n            this.model = model;\n        }\n        if (field) {\n            this.field = field;\n        }\n        this.message = message || \"A general data error occured.\";\n        if (innerMessage) {\n            this.innerMessage = innerMessage;\n        }\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing not null exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is ENULL.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error. The default status is 409 (Conflict)\n * @property {string} model - The target model name\n * @property {string} field - The target field name\n * @augments DataError\n */\nexport class NotNullError extends DataError {\n    /**\n     * @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} field - The target field\n     */\n    constructor(message, innerMessage, model, field) {\n        super(\"ENULL\", message || \"A value is required\", innerMessage, model, field);\n        this.statusCode = 409;\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing not found exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is EFOUND.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error. The default status is 404 (Conflict)\n * @property {string} model - The target model name\n * @augments DataError\n */\nexport class DataNotFoundError extends DataError {\n    /**\n     * @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     */\n    constructor(message, innerMessage, model) {\n        super(\"EFOUND\", message || \"The requested data was not found.\", innerMessage, model);\n        this.statusCode = 404;\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing unique constraint exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is ENULL.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error. The default status is 409 (Conflict)\n * @property {string} model - The target model name\n * @property {string} constraint - The target constraint name\n * @augments DataError\n */\nexport class UniqueConstraintError extends DataError {\n\n    /* @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} constraint - The target constraint\n     */\n    constructor(message, innerMessage, model, constraint) {\n        super(\"EUNQ\", message || \"A unique constraint violated\", innerMessage, model);\n        if (constraint) {\n            this.constraint = constraint;\n        }\n        this.statusCode = 409;\n    }\n}\n\n/**\n * @classdesc Represents an access denied data exception.\n * @class\n *\n * @param {string=} message - The error message\n * @param {string=} innerMessage - The error inner message\n * @property {string} code - A string that represents an error code. The error code is EACCESS.\n * @property {number} status - A number that represents an error status. The error status is 401.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @augments DataError\n */\nexport class AccessDeniedError extends DataError {\n    /* @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     */\n    constructor(message, innerMessage) {\n        super(\"EACCESS\", (\"Access Denied\" || message), innerMessage);\n        this.statusCode = 401;\n    }\n}\n"]}