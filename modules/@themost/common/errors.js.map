{"version":3,"sources":["errors.es6.js"],"names":[],"mappings":"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","file":"errors.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n\nimport _ from \"lodash\";\nimport {Errors} from \"./resources/http-error-codes\";\n\n/**\n * @class\n * @augments TypeError\n */\nexport class ArgumentError extends TypeError {\n\n    constructor(message, code) {\n        super(message);\n        /**\n         * Gets or sets a string which may be used to identify this error e.g. ECHECK, ENULL etc\n         */\n        this.code = code || \"EARG\";\n    }\n}\n\n/**\n * @class\n * @augments TypeError\n */\nexport class AbstractMethodError extends TypeError {\n    constructor(message) {\n        super(message || \"Class does not implement inherited abstract method.\");\n    }\n}\n\n/**\n * @classdesc Abstract Class Exception\n * @class\n * @augments Error\n *\n */\nexport class AbstractClassError extends TypeError {\n    constructor(message) {\n        super(message || \"An abstract class cannot be instantiated.\");\n    }\n}\n\n/**\n * @class\n * @augments Error\n */\nexport class FileNotFoundError extends Error {\n    constructor(message) {\n        super(message || \"File not found\");\n    }\n}\n\n/**\n * @class\n * @augments Error\n */\nexport class HttpError extends Error {\n    /**\n     * @param {Error} err\n     * @returns {HttpError}\n     */\n    static create(err) {\n        if (typeof err === \"undefined\" || err === null) {\n            return new HttpError();\n        } else {\n            if (err.status) {\n                return new HttpError(err.status, err.message);\n            } else {\n                return new HttpError(500, err.message);\n            }\n        }\n    }\n\n    /**\n     * @constructor\n     * @param {number=} status\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(status, message, innerMessage) {\n        super(message);\n        const finalStatus = (typeof status === \"undefined\" || status === null) ? 500 : status;\n        const err = _.find(Errors, (x) => {\n            return (x.status === finalStatus);\n        });\n        if (err) {\n            this.title = err.title;\n            this.message = message || err.message;\n            this.statusCode = err.status;\n        } else {\n            /**\n             * Gets or sets a short title for this HTTP error (e.g. Not Found, Bad Request)\n             */\n            this.title = \"Internal Server Error\";\n            this.message = message || \"The server encountered an internal error and was unable to complete the request.\";\n            /**\n             * Gets or sets the status code if this HTTP error\n             */\n            this.statusCode = finalStatus;\n        }\n        /**\n         * Gets or sets an inner message for this HTTP error.\n         */\n        this.innerMessage = innerMessage;\n    }\n}\n\n/**\n * @classdesc HTTP 400 Bad Request exception class\n * @class\n */\nexport class HttpBadRequestError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(400, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 404 Not Found Exception class\n * @class\n * @augments HttpError\n */\nexport class HttpNotFoundError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(404, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 405 Method Not Allowed exception class\n * @class\n * @augments HttpError\n */\nexport class HttpMethodNotAllowedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(405, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 406 Not Acceptable exception class\n * @class\n * @augments HttpError\n */\nexport class HttpNotAcceptableAllowedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(406, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 408 RequestTimeout exception class\n * @class\n * @augments HttpError\n */\nexport class HttpRequestTimeoutError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(408, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 409 Conflict exception class\n * @class\n * @augments HttpError\n */\nexport class HttpConflictError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(409, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 498 Token Expired exception class\n * @class\n * @augments HttpError\n */\nexport class HttpTokenExpiredError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(498, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 499 Token Required exception class\n * @class\n * @augments HttpError\n */\nexport class HttpTokenRequiredError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(499, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 401 Unauthorized Exception class\n * @class\n * @augments HttpError\n */\nexport class HttpUnauthorizedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(401, message, innerMessage);\n    }\n}\n\n/**\n * HTTP 403 Forbidden Exception class\n * @class\n * @param {string=} message\n * @param {string=} innerMessage\n * @augments HttpError\n */\nexport class HttpForbiddenError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(403, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 500 Internal Server Error Exception class\n * @class\n * @augments HttpError\n */\nexport class HttpServerError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(500, message, innerMessage);\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing exceptions on data operations\n * @class\n * @property {string} code - A string that represents an error code e.g. EDATA\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error.\n * @augments Error\n */\nexport class DataError extends Error {\n    /* @constructor\n     * @param {string=} code - A string that represents an error code\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} field - The target field\n     */\n    constructor(code, message, innerMessage, model, field) {\n        super();\n        this.code = code || \"EDATA\";\n        if (model) {\n            this.model = model;\n        }\n        if (field) {\n            this.field = field;\n        }\n        this.message = message || \"A general data error occured.\";\n        if (innerMessage) {\n            this.innerMessage = innerMessage;\n        }\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing not null exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is ENULL.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error. The default status is 409 (Conflict)\n * @property {string} model - The target model name\n * @property {string} field - The target field name\n * @augments DataError\n */\nexport class NotNullError extends DataError {\n    /**\n     * @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} field - The target field\n     */\n    constructor(message, innerMessage, model, field) {\n        super(\"ENULL\", message || \"A value is required\", innerMessage, model, field);\n        this.statusCode = 409;\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing not found exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is EFOUND.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error. The default status is 404 (Conflict)\n * @property {string} model - The target model name\n * @augments DataError\n */\nexport class DataNotFoundError extends DataError {\n    /**\n     * @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     */\n    constructor(message, innerMessage, model) {\n        super(\"EFOUND\", message || \"The requested data was not found.\", innerMessage, model);\n        this.statusCode = 404;\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing unique constraint exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is ENULL.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the appropriate HTTP error. The default status is 409 (Conflict)\n * @property {string} model - The target model name\n * @property {string} constraint - The target constraint name\n * @augments DataError\n */\nexport class UniqueConstraintError extends DataError {\n\n    /* @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} constraint - The target constraint\n     */\n    constructor(message, innerMessage, model, constraint) {\n        super(\"EUNQ\", message || \"A unique constraint violated\", innerMessage, model);\n        if (constraint) {\n            this.constraint = constraint;\n        }\n        this.statusCode = 409;\n    }\n}\n\n/**\n * @classdesc Represents an access denied data exception.\n * @class\n *\n * @param {string=} message - The error message\n * @param {string=} innerMessage - The error inner message\n * @property {string} code - A string that represents an error code. The error code is EACCESS.\n * @property {number} status - A number that represents an error status. The error status is 401.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @augments DataError\n */\nexport class AccessDeniedError extends DataError {\n    /* @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     */\n    constructor(message, innerMessage) {\n        super(\"EACCESS\", (\"Access Denied\" || message), innerMessage);\n        this.statusCode = 401;\n    }\n}\n"]}