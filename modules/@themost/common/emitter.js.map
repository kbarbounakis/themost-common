{"version":3,"sources":["src/emitter.js"],"names":[],"mappings":";;;;;;;;;;;AAQA;;IAAQ,e,UAAA,e;;AACR;;IAAQ,Y,WAAA,Y;;AACR;;IAAO,O;;;;;;;;+eAVP;;;;;;;;;;AAWA,IAAM,oBAAoB,WAA1B;AACA,IAAM,mBAAmB,QAAO,UAAP,CAAzB;AACA;;;;;IAIa,sB,WAAA,sB;;;AAET;;;AAGA,sCAAc;AAAA;;AAAA;AAEb;;AAED;;;;;;AAMJ;;;;;6BACS,K,EAAgB;AAAA,8CAAN,IAAM;AAAN,oBAAM;AAAA;;AACjB;AACA,gBAAI,OAAO,KAAK,iBAAL,CAAP,KAAmC,UAAvC,EAAmD;AAC/C,sBAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACH;AACD;AACA,gBAAM,kBAAkB,GAAG,MAAH,CAAU,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAV,CAAxB;AACA,gBAAI,gBAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B;AACA,oBAAI,OAAO,gBAAgB,gBAAgB,MAAhB,GAAyB,CAAzC,CAAP,KAAuD,UAA3D,EAAuE;AACnE,0BAAM,IAAI,SAAJ,CAAc,yBAAd,CAAN;AACH;AACJ;AACD;AACA,gBAAM,WAAW,gBAAgB,gBAAgB,MAAhB,GAAyB,CAAzC,CAAjB;AACA;AACA,gBAAM,YAAY,KAAK,iBAAL,EAAwB,KAAxB,CAAlB;AACA;AACA,gBAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACA,uBAAO,UAAP;AACH;AACD;AACA,mBAAO,gBAAgB,KAAhB,CAAsB,IAAtB,EAA4B,CAAC,SAAD,EAAY,MAAZ,CAAmB,eAAnB,CAA5B,CAAP;AACH;AACD;;;;;;;;oCAKY,K,EAAO,Q,EAAU;AACzB,+JAAyB,KAAzB,EAAgC,QAAhC;AACH;AACD;;;;;;;;2BAKG,K,EAAO,Q,EAAU;AAChB,sJAAgB,KAAhB,EAAuB,QAAvB;AACH;AACD;;;;;;;;wCAKgB,K,EAAO,Q,EAAU;AAC7B,mKAA6B,KAA7B,EAAoC,QAApC;AACH;AACD;;;;;;;;4CAKoB,K,EAAO,Q,EAAU;AACjC,uKAAiC,KAAjC,EAAwC,QAAxC;AACH;AACD;;;;;;;;uCAKe,K,EAAO,Q,EAAU;AAC5B,kKAA4B,KAA5B,EAAmC,QAAnC;AACH;AACD;;;;;;;2CAImB,K,EAAO;AAC1B,sKAAgC,KAAhC;AACH;;AAEG;;;;;;;wCAIgB,C,EAAG;AACnB,mKAA6B,CAA7B;AACH;;AAEG;;;;;;0CAGkB;AAClB;AACH;;AAEG;;;;;;;sCAIc,I,EAAM;AACpB,iKAA2B,IAA3B;AACH;;AAEG;;;;;;;;6BAKK,K,EAAO,Q,EAAU;AACtB,gBAAM,OAAO,IAAb;AACA,gBAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAChC,sBAAM,UAAU,6BAAV,CAAN;AACH;AACD,gBAAI,QAAQ,KAAZ;AACA,qBAAS,CAAT,GAAa;AACT,qBAAK,cAAL,CAAoB,KAApB,EAA2B,CAA3B;AACA,oBAAI,CAAC,KAAL,EAAY;AACR,4BAAQ,IAAR;AACA,6BAAS,KAAT,CAAe,IAAf,EAAqB,SAArB;AACH;AACJ;AACD,cAAE,gBAAF,IAAsB,QAAtB;AACA,iBAAK,EAAL,CAAQ,KAAR,EAAe,CAAf;AACA,mBAAO,IAAP;AACH;;;;EArI2C,Y","file":"emitter.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport {applyEachSeries} from \"async\";\nimport {EventEmitter} from \"events\";\nimport Symbol from \"symbol\";\nconst listenersProperty = \"listeners\";\nconst listenerProperty = Symbol(\"listener\");\n/**\n * @class\n * @extends EventEmitter\n */\nexport class SequentialEventEmitter extends EventEmitter {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Emits an event by specifying additional arguments where the last argument is a callback function\n     * @param {string | symbol} event\n     * @param args\n     * @returns {*}\n     */\n// eslint-disable-next-line no-unused-vars\n    emit(event, ...args) {\n        //get listeners\n        if (typeof this[listenersProperty] !== \"function\") {\n            throw new Error(\"undefined listeners\");\n        }\n        //get arguments as array (remove the first argument -event name-)\n        const argsAndCallback = [].concat(Array.prototype.slice.call(arguments, 1));\n        if (argsAndCallback.length > 0) {\n            //check the last argument (expected callback function)\n            if (typeof argsAndCallback[argsAndCallback.length - 1] !== \"function\") {\n                throw new TypeError(\"Expected event callback\");\n            }\n        }\n        //get callback function (the last argument of arguments list)\n        const callback = argsAndCallback[argsAndCallback.length - 1];\n        //get array of listeners\n        const listeners = this[listenersProperty](event);\n        //validate listeners\n        if (listeners.length === 0) {\n            //exit emitter by executing the defined callback\n            return callback();\n        }\n        //apply each series\n        return applyEachSeries.apply(this, [listeners].concat(argsAndCallback));\n    }\n    /**\n     * @param {string|symbol} event\n     * @param {Function} listener\n     * @returns this\n     */\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    /**\n     * @param {string|symbol} event\n     * @param {Function} listener\n     * @returns this\n     */\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    /**\n     * @param {string|symbol} event\n     * @param {Function} listener\n     * @returns this\n     */\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    /**\n     * @param {string|symbol} event\n     * @param {Function} listener\n     * @returns this\n     */\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    /**\n     * @param {string|symbol} event\n     * @param {Function} listener\n     * @returns this\n     */\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    /**\n     * @param {string|symbol} event\n     * @returns this\n     */\n    removeAllListeners(event) {\n    return super.removeAllListeners(event);\n}\n\n    /**\n     * @param {number} n\n     * @returns this\n     */\n    setMaxListeners(n) {\n    return super.setMaxListeners(n);\n}\n\n    /**\n     * @return {*|number}\n     */\n    getMaxListeners() {\n    return super.getMaxListeners();\n}\n\n    /**\n     * @param type\n     * @return {*|number}\n     */\n    listenerCount(type) {\n    return super.listenerCount(type);\n}\n\n    /**\n     * @param {string|symbol} event\n     * @param {Function} listener\n     * @return {SequentialEventEmitter}\n     */\n    once(event, listener) {\n    const self = this;\n    if (typeof listener !== \"function\") {\n        throw TypeError(\"listener must be a function\");\n    }\n    let fired = false;\n    function g() {\n        self.removeListener(event, g);\n        if (!fired) {\n            fired = true;\n            listener.apply(this, arguments);\n        }\n    }\n    g[listenerProperty] = listener;\n    self.on(event, g);\n    return this;\n}\n}\n"]}