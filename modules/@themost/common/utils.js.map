{"version":3,"sources":["utils.js"],"names":["blueimp","_","sprintf","ArgumentError","UUID_CHARS","HEX_CHARS","STRIP_COMMENTS","DateTimeRegex","BooleanTrueRegex","BooleanFalseRegex","NullRegex","UndefinedRegex","IntegerRegex","FloatRegex","GuidRegex","isNode","Object","prototype","toString","call","process","Args","expr","err","notNull","res","Error","arg","name","notString","length","notNumber","Base26Number","x","num","Math","floor","out","a","charCodeAt","String","fromCharCode","s","test","i","value","toBase26","TextUtils","md5","md5module","Date","toUTCString","JSON","stringify","crypto","require","createHash","update","digest","check","sha1","sha256","chars","uuid","r","random","join","Guid","replace","newUUID","RandomUtils","str","substr","randomInt","min","max","LangUtils","fn","isFunction","fnStr","result","slice","indexOf","match","form","options","keys","forEach","key","hasOwnProperty","extend","convert","parseInt","parseFloat","parse","origin","convertValues","exec","descriptor","expr1","isArray","index","UnknownPropertyDescriptor","re","typedValue","push","obj","defineProperty","configurable","enumerable","get","set","PathUtils","part","parts","l","pathModule","path","apply","arguments","concat","split","newParts","part1","pop","unshift","Reset","FgBlack","FgRed","FgGreen","FgYellow","FgBlue","FgMagenta","FgCyan","FgWhite","Bold","LogLevels","error","warn","info","verbose","debug","LogLevelColors","TraceLogger","colors","level","env","NODE_ENV","data","args","Array","write","text","console","log","timestamp","toUpperCase","TraceUtils","logger","useLogger"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport blueimp from \"blueimp-md5\";\nimport _ from \"lodash\";\nimport {sprintf} from \"sprintf\";\nimport {ArgumentError} from \"./errors\";\n\nconst UUID_CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nconst HEX_CHARS = \"abcdef1234567890\";\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nconst DateTimeRegex = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?$/g;\nconst BooleanTrueRegex = /^true$/ig;\nconst BooleanFalseRegex = /^false$/ig;\nconst NullRegex = /^null$/ig;\nconst UndefinedRegex = /^undefined$/ig;\nconst IntegerRegex = /^[-+]?\\d+$/g;\nconst FloatRegex = /^[+-]?\\d+(\\.\\d+)?$/g;\nconst GuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n\nfunction isNode() {\n    return Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\";\n}\n\n/**\n * @class\n */\nexport class Args {\n    /**\n     * Checks the expression and throws an exception if the condition is not met.\n     * @param {*} expr\n     * @param {string|Error} err\n     */\n    static check(expr, err) {\n        Args.notNull(expr, \"Expression\");\n        if (typeof expr === \"function\") {\n            expr.call();\n        }\n        let res;\n        if (typeof expr === \"function\") {\n            res = !(expr.call());\n        } else {\n            res = (!expr);\n        }\n        if (res) {\n            if (err instanceof Error) {\n                throw err;\n            }\n            throw new ArgumentError(err, \"ECHECK\");\n        }\n    }\n\n    /**\n     *\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notNull(arg, name) {\n        if (typeof arg === \"undefined\" || arg === null) {\n            throw new ArgumentError(name + \" may not be null or undefined\", \"ENULL\");\n        }\n    }\n\n    /**\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notString(arg, name) {\n        if (typeof arg !== \"string\") {\n            throw new ArgumentError(name + \" must be a string\");\n        }\n    }\n\n    /**\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notFunction(arg, name) {\n        if (typeof arg !== \"function\") {\n            throw new ArgumentError(name + \" must be a function\");\n        }\n    }\n\n    /**\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notNumber(arg, name) {\n        if (typeof arg !== \"number\") {\n            throw new ArgumentError(name + \" must be number\");\n        }\n    }\n\n    /**\n     * @param {string|*} arg\n     * @param {string} name\n     */\n    static notEmpty(arg, name) {\n        Args.notNull(arg, name);\n        Args.notString(arg, name);\n        if (arg.length === 0) {\n            throw new ArgumentError(name + \" may not be empty\", \"EEMPTY\");\n        }\n    }\n\n    /**\n     * @param {number|*} arg\n     * @param {string} name\n     */\n    static notNegative(arg, name) {\n        Args.notNumber(arg, name);\n        if (arg < 0) {\n            throw new ArgumentError(name + \" may not be negative\", \"ENEG\");\n        }\n    }\n\n    /**\n     * @param {number|*} arg\n     * @param {string} name\n     */\n    static notPositive(arg, name) {\n        Args.notNumber(arg, name);\n        if (arg <= 0) {\n            throw new ArgumentError(name + \" may not be negative or zero\", \"EPOS\");\n        }\n    }\n}\n\nexport class Base26Number {\n\n    static toBase26(x) {\n        let num = Math.floor(x | 0);\n        if (num < 0) {\n            throw new Error(\"A non-positive integer cannot be converted to base-26 format.\");\n        }\n        if (num > 208827064575) {\n            throw new Error(\"A positive integer bigger than 208827064575 cannot be converted to base-26 format.\");\n        }\n        let out = \"\";\n        let length = 1;\n        const a = \"a\".charCodeAt(0);\n        while (length <= 8) {\n            out += String.fromCharCode(a + (num % 26));\n            num = Math.floor(num / 26);\n            length += 1;\n        }\n        return out;\n    }\n\n    static fromBase26(s) {\n        let num = 0;\n        if (!/[a-z]{8}/.test(s)) {\n            throw new Error(\"Invalid base-26 format.\");\n        }\n        const a = \"a\".charCodeAt(0);\n        for (let i = 7; i >= 0; i--) {\n            num = (num * 26) + (s[i].charCodeAt(0) - a);\n        }\n        return num;\n    }\n\n    constructor(value) {\n        this.value = value;\n    }\n\n    toString() {\n        return Base26Number.toBase26(this.value);\n    }\n\n}\n\nexport class TextUtils {\n    /**\n     * Converts the given parameter to MD5 hex string\n     * @static\n     * @param {*} value\n     * @returns {string|undefined}\n     */\n    static toMD5(value) {\n\n        if (typeof value === \"undefined\" || value === null) {\n            return;\n        }\n        //browser implementation\n        let md5;\n        let md5module;\n        if (!isNode()) {\n            md5 = blueimp;\n            if (typeof value === \"string\") {\n                return md5(value);\n            } else if (value instanceof Date) {\n                return md5(value.toUTCString());\n            } else {\n                return md5(JSON.stringify(value));\n            }\n        }\n        //node.js implementation\n        md5module = \"crypto\";\n        const crypto = require(md5module);\n        md5 = crypto.createHash(\"md5\");\n        if (typeof value === \"string\") {\n            md5.update(value);\n        } else if (value instanceof Date) {\n            md5.update(value.toUTCString());\n        } else {\n            md5.update(JSON.stringify(value));\n        }\n        return md5.digest(\"hex\");\n    }\n\n    /**\n     * Converts the given parameter to SHA1 hex string\n     * @static\n     * @param {*} value\n     * @returns {string|undefined}\n     */\n    static toSHA1(value) {\n\n        Args.check(isNode(), \"This method is not implemented for this environment\");\n\n        const crypto = require(\"crypto\");\n        if (typeof value === \"undefined\" || value === null) {\n            return;\n        }\n        const sha1 = crypto.createHash(\"sha1\");\n        if (typeof value === \"string\") {\n            sha1.update(value);\n        } else if (value instanceof Date) {\n            sha1.update(value.toUTCString());\n        } else {\n            sha1.update(JSON.stringify(value));\n        }\n        return sha1.digest(\"hex\");\n    }\n\n    /**\n     * Converts the given parameter to SHA256 hex string\n     * @static\n     * @param {*} value\n     * @returns {string|undefined}\n     */\n    static toSHA256(value) {\n\n        Args.check(isNode(), \"This method is not implemented for this environment\");\n\n        const crypto = require(\"crypto\");\n        if (typeof value === \"undefined\" || value === null) {\n            return;\n        }\n        const sha256 = crypto.createHash(\"sha256\");\n        if (typeof value === \"string\") {\n            sha256.update(value);\n        } else if (value instanceof Date) {\n            sha256.update(value.toUTCString());\n        } else {\n            sha256.update(JSON.stringify(value));\n        }\n        return sha256.digest(\"hex\");\n    }\n\n    /**\n     * Returns a random GUID/UUID string\n     * @static\n     * @returns {string}\n     */\n    static newUUID() {\n        const chars = UUID_CHARS;\n        const uuid = [];\n        // rfc4122, version 4 form\n        let r;\n        // rfc4122 requires these characters\n        uuid[8] = uuid[13] = uuid[18] = uuid[23] = \"-\";\n        uuid[14] = \"4\";\n\n        // Fill in random data.  At i==19 set the high bits of clock sequence as\n        // per rfc4122, sec. 4.1.5\n        for (let i = 0; i < 36; i++) {\n            if (!uuid[i]) {\n                r = 0 | Math.random() * 16;\n                uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n            }\n        }\n        return uuid.join(\"\");\n    }\n}\n\n/**\n *\n */\nexport class Guid {\n    /**\n     * @param {string} s\n     * @returns {boolean}\n     */\n    static isGuid(s) {\n        if (typeof s !== \"string\") {\n            return false;\n        }\n        return GuidRegex.test(s);\n    }\n\n    /**\n     * @returns {Guid}\n     */\n    static newGuid() {\n        return new Guid();\n    }\n\n    /**\n     * @constructor\n     * @param {string=} value\n     */\n    constructor(value) {\n        if (typeof value === \"string\") {\n            const test = value.replace(/^{/, \"\").replace(/{$/, \"\");\n            Args.check(GuidRegex.test(test), \"Value must be a valid UUID\");\n            this.value = test;\n            return;\n        }\n        this.value = TextUtils.newUUID();\n    }\n\n//noinspection JSUnusedGlobalSymbols\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return this.value;\n    }\n\n//noinspection JSUnusedGlobalSymbols\n    /**\n     * @returns {string}\n     */\n    valueOf() {\n        return this.value;\n    }\n\n//noinspection JSUnusedGlobalSymbols\n    toJSON() {\n        return this.value;\n    }\n\n}\n\n/**\n * @class\n */\nexport class RandomUtils {\n    /**\n     * Returns a random string based on the length specified\n     * @param {Number} length\n     */\n    static randomChars(length) {\n        length = length || 8;\n        const chars = \"abcdefghkmnopqursuvwxz2456789ABCDEFHJKLMNPQURSTUVWXYZ\";\n        let str = \"\";\n        for (let i = 0; i < length; i++) {\n            str += chars.substr(this.randomInt(0, chars.length - 1), 1);\n        }\n        return str;\n    }\n\n    /**\n     * Returns a random integer between a minimum and a maximum value\n     * @param {number} min\n     * @param {number} max\n     */\n    static randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /**\n     * Returns a random string based on the length specified\n     * @static\n     * @param {number} length\n     * @returns {string}\n     */\n    static randomHex(length) {\n        length = (length || 8) * 2;\n        let str = \"\";\n        for (let i = 0; i < length; i++) {\n            str += HEX_CHARS.substr(this.randomInt(0, HEX_CHARS.length - 1), 1);\n        }\n        return str;\n    }\n}\n\n\n/**\n * @class\n */\nexport class LangUtils {\n\n    /**\n     * Returns an array of strings which represents the arguments' names of the given function\n     * @param {Function} fn\n     * @returns {Array}\n     */\n    static getFunctionParams(fn) {\n        if (!_.isFunction(fn)) {\n            return [];\n        }\n        const fnStr = fn.toString().replace(STRIP_COMMENTS, \"\");\n        let result = fnStr.slice(fnStr.indexOf(\"(\") + 1, fnStr.indexOf(\")\")).match(/([^\\s,]+)/g);\n        if (result === null) {\n            result = [];\n        }\n        return result;\n    }\n\n    /**\n     * Parses HTTP form formatted values (e.g. \"user[name]\", user[password], user[options][rememberMe] etc ) and returns the equivalent native object\n     * @param {*} form\n     * @param {*} options\n     * @returns {*}\n     * @example\n     *\n     */\n    static parseForm(form, options) {\n        const result = {};\n        if (typeof form === \"undefined\" || form === null) {\n            return result;\n        }\n        const keys = Object.keys(form);\n        _.forEach(keys, (key) => {\n            if (form.hasOwnProperty(key)) {\n                LangUtils.extend(result, key, form[key], options);\n            }\n        });\n        return result;\n    }\n\n//noinspection JSUnusedGlobalSymbols\n    /**\n     * Parses value value or string and returns the resulted object.\n     * @param {*} value\n     * @returns {*}\n     */\n    static parseValue(value) {\n        return LangUtils.convert(value);\n    }\n\n//noinspection JSUnusedGlobalSymbols\n    /**\n     * Parses value value and returns the equivalent integer.\n     * @param {*} value\n     * @returns {*}\n     */\n    static parseInt(value) {\n        return parseInt(value, 10) || 0;\n    }\n\n//noinspection JSUnusedGlobalSymbols\n    /**\n     * Parses value value and returns the equivalent float number.\n     * @param {*} value\n     * @returns {*}\n     */\n    static parseFloat(value) {\n        return parseFloat(value) || 0;\n    }\n\n//noinspection JSUnusedGlobalSymbols\n    /**\n     * Parses value value and returns the equivalent boolean.\n     * @param {*} value\n     * @returns {*}\n     */\n    static parseBoolean(value) {\n        if (typeof value === \"undefined\" || value === null) {\n            return false;\n        } else if (typeof value === \"number\") {\n            return value !== 0;\n        } else if (typeof value === \"string\") {\n            if (value.match(IntegerRegex) || value.match(FloatRegex)) {\n                return parseInt(value, 10) !== 0;\n            } else if (value.match(BooleanTrueRegex)) {\n                return true;\n            } else if (value.match(BooleanFalseRegex)) {\n                return false;\n            } else if (/^yes$|^on$|^y$|^valid$/i.test(value)) {\n                return true;\n            } else if (/^no$|^off$|^n$|^invalid$/i.test(value)) {\n                return false;\n            } else {\n                return false;\n            }\n        } else if (typeof value === \"boolean\") {\n            return value;\n        } else {\n            return (parseInt(value, 10) || 0) !== 0;\n        }\n    }\n\n    /**\n     * @param {string} value\n     */\n    static convert(value) {\n        let result;\n        if ((typeof value === \"string\")) {\n            if (value.length === 0) {\n                result = value;\n            }\n            if (value.match(BooleanTrueRegex)) {\n                result = true;\n            } else if (value.match(BooleanFalseRegex)) {\n                result = false;\n            } else if (value.match(NullRegex) || value.match(UndefinedRegex)) {\n                result = null;\n            } else if (value.match(IntegerRegex)) {\n                result = parseInt(value, 10);\n            } else if (value.match(FloatRegex)) {\n                result = parseFloat(value);\n            } else if (value.match(DateTimeRegex)) {\n                result = new Date(Date.parse(value));\n            } else {\n                result = value;\n            }\n        } else {\n            result = value;\n        }\n        return result;\n    }\n\n    /**\n     *\n     * @param {*} origin\n     * @param {string} expr\n     * @param {string} value\n     * @param {IConvertOptions=} options\n     * @returns {*}\n     */\n    static extend(origin, expr, value, options) {\n\n        options = options || {convertValues: false};\n        //find base notation\n        let match = /(^\\w+)\\[/.exec(expr);\n        let name;\n        let descriptor;\n        let expr1;\n        if (match) {\n            //get property name\n            name = match[1];\n            //validate array property\n            if (/^\\d+$/g.test(name)) {\n                //property is an array\n                if (!_.isArray(origin.value)) {\n                    origin.value = [];\n                }\n                // get new expression\n                expr1 = expr.substr(match.index + match[1].length);\n                LangUtils.extend(origin, expr1, value, options);\n            } else {\n                //set property value (unknown)\n                origin[name] = origin[name] || new LangUtils();\n                descriptor = new UnknownPropertyDescriptor(origin, name);\n                // get new expression\n                expr1 = expr.substr(match.index + match[1].length);\n                LangUtils.extend(descriptor, expr1, value, options);\n            }\n        } else if (expr.indexOf(\"[\") === 0) {\n            //get property\n            const re = /\\[(.*?)]/g;\n            match = re.exec(expr);\n            if (match) {\n                name = match[1];\n                // get new expression\n                expr1 = expr.substr(match.index + match[0].length);\n                if (/^\\d+$/g.test(name)) {\n                    // property is an array\n                    if (!_.isArray(origin.value)) {\n                        origin.value = [];\n                    }\n                }\n                if (expr1.length === 0) {\n                    if (origin.value instanceof LangUtils) {\n                        origin.value = {};\n                    }\n                    let typedValue;\n                    // convert string value\n                    if ((typeof value === \"string\") && options.convertValues) {\n                        typedValue = LangUtils.convert(value);\n                    } else {\n                        typedValue = value;\n                    }\n                    if (_.isArray(origin.value)) {\n                        origin.value.push(typedValue);\n                    } else {\n                        origin.value[name] = typedValue;\n                    }\n                } else {\n                    if (origin.value instanceof LangUtils) {\n                        origin.value = {};\n                    }\n                    origin.value[name] = origin.value[name] || new LangUtils();\n                    descriptor = new UnknownPropertyDescriptor(origin.value, name);\n                    LangUtils.extend(descriptor, expr1, value, options);\n                }\n            } else {\n                throw new Error(\"Invalid object property notation. Expected [name]\");\n            }\n        } else if (/^\\w+$/.test(expr)) {\n            if (options.convertValues) {\n                origin[expr] = LangUtils.convert(value);\n            } else {\n                origin[expr] = value;\n            }\n\n        } else {\n            throw new Error(\"Invalid object property notation. Expected property[name] or [name]\");\n        }\n        return origin;\n    }\n\n}\n\n/**\n * @class\n * @constructor\n */\nclass UnknownPropertyDescriptor {\n    constructor(obj, name) {\n        Object.defineProperty(this, \"value\", {\n            configurable: false, enumerable: true, get() {\n                return obj[name];\n            }, set(value) {\n                obj[name] = value;\n            }\n        });\n        Object.defineProperty(this, \"name\", {\n            configurable: false, enumerable: true, get() {\n                return name;\n            }\n        });\n    }\n}\n\n/**\n * @class\n */\nexport class PathUtils {\n    /**\n     *\n     * @param {...string} part\n     * @returns {string}\n     */\n    static join(...part) {\n        let parts;\n        let i;\n        let l;\n        const pathModule = \"path\";\n        if (isNode()) {\n            const path = require(pathModule);\n            return path.join.apply(null, part);\n        }\n        // Split the inputs into a list of path commands.\n        parts = [];\n        for (i = 0, l = arguments.length; i < l; i++) {\n            parts = parts.concat(arguments[i].replace(/\\\\/g, \"/\").split(\"/\"));\n        }\n        // Interpret the path commands to get the new resolved path.\n        const newParts = [];\n        for (i = 0, l = parts.length; i < l; i++) {\n            const part1 = parts[i];\n            // Remove leading and trailing slashes\n            // Also remove \".\" segments\n            if (!part1 || part1 === \".\") {\n                continue;\n            }\n            // Interpret \"..\" to pop the last segment\n            if (part1 === \"..\") {\n                newParts.pop();\n            } else {\n                newParts.push(part1);\n            }\n        }\n        // Preserve the initial slash if there was one.\n        if (parts[0] === \"\") {\n            newParts.unshift(\"\");\n        }\n        // Turn back into a single string path.\n        return newParts.join(\"/\") || (newParts.length ? \"/\" : \".\");\n    }\n}\n\nconst Reset = \"\\x1b[0m\";\nconst FgBlack = \"\\x1b[30m\";\nconst FgRed = \"\\x1b[31m\";\nconst FgGreen = \"\\x1b[32m\";\n// eslint-disable-next-line no-unused-vars\nconst FgYellow = \"\\x1b[33m\";\nconst FgBlue = \"\\x1b[34m\";\nconst FgMagenta = \"\\x1b[35m\";\n// eslint-disable-next-line no-unused-vars\nconst FgCyan = \"\\x1b[36m\";\n// eslint-disable-next-line no-unused-vars\nconst FgWhite = \"\\x1b[37m\";\n\nconst Bold = \"\\x1b[1m\";\n\nconst LogLevels = {\n    error: 0,\n    warn: 1,\n    info: 2,\n    verbose: 3,\n    debug: 4,\n};\n\nconst LogLevelColors = {\n    error: FgRed,\n    warn: FgMagenta,\n    info: FgBlack,\n    verbose: FgBlue,\n    debug: Bold + FgGreen,\n};\n\n/**\n * extends ITraceLogger\n */\nexport class TraceLogger {\n\n    constructor(options) {\n        this.options = {\n            colors: true,\n            level: \"info\",\n        };\n        if (typeof options === \"undefined\" && options !== null && isNode()) {\n            if (process.env.NODE_ENV === \"development\") {\n                this.options.level = \"debug\";\n            }\n        }\n        if (typeof options !== \"undefined\" && options !== null) {\n            this.options = options;\n            //validate logging level\n            Args.check(LogLevels.hasOwnProperty(this.options.level), \"Invalid logging level. Expected error, warn, info, verbose or debug.\");\n        }\n    }\n// eslint-disable-next-line no-unused-vars\n    level(level) {\n        Args.check(LogLevels.hasOwnProperty(level), \"Invalid logging level. Expected error, warn, info, verbose or debug.\");\n        this.options.level = level;\n        return this;\n    }\n// eslint-disable-next-line no-unused-vars\n    log(...data) {\n        const args = Array.prototype.slice.call(arguments);\n        this.write(\"info\", sprintf.apply(null, args));\n    }\n// eslint-disable-next-line no-unused-vars\n    info(...data) {\n        const args = Array.prototype.slice.call(arguments);\n        this.write(\"info\", sprintf.apply(null, args));\n    }\n// eslint-disable-next-line no-unused-vars\n    error(...data) {\n        const args = Array.prototype.slice.call(arguments);\n        this.write(\"error\", sprintf.apply(null, args));\n    }\n// eslint-disable-next-line no-unused-vars\n    warn(...data) {\n        const args = Array.prototype.slice.call(arguments);\n        this.write(\"warn\", sprintf.apply(null, args));\n    }\n// eslint-disable-next-line no-unused-vars\n    verbose(...data) {\n        const args = Array.prototype.slice.call(arguments);\n        this.write(\"verbose\", sprintf.apply(null, args));\n    }\n// eslint-disable-next-line no-unused-vars\n    debug(...data) {\n        const args = Array.prototype.slice.call(arguments);\n        this.write(\"debug\", sprintf.apply(null, args));\n    }\n\n    timestamp() {\n        return (new Date()).toUTCString();\n    }\n\n    write(level, text) {\n        if (LogLevels[level] > LogLevels[this.options.level]) {\n            return;\n        }\n        /* tslint:disable:no-console */\n        if (this.options.colors) {\n// eslint-disable-next-line no-console\n            console.log(LogLevelColors[level] + this.timestamp() + \" [\" + level.toUpperCase() + \"] \" + text, Reset);\n        } else {\n// eslint-disable-next-line no-console\n            console.log(this.timestamp() + \" [\" + level.toUpperCase() + \"] \" + text);\n        }\n        /* tslint:enable:no-console */\n    }\n\n}\n\nexport class TraceUtils {\n\n\n    static useLogger(logger) {\n        TraceUtils.logger = logger;\n    }\n\n    /**\n     * @static\n     * @param {...*} data\n     */\n    // eslint-disable-next-line no-unused-vars\n    static log(...data) {\n        TraceUtils.logger.log.apply(TraceUtils.logger, Array.prototype.slice.call(arguments));\n    }\n\n    /**\n     * @static\n     * @param {...*} data\n     */\n    // eslint-disable-next-line no-unused-vars\n    static error(...data) {\n        TraceUtils.logger.error.apply(TraceUtils.logger, Array.prototype.slice.call(arguments));\n    }\n\n    /**\n     *\n     * @static\n     * @param {...*} data\n     */\n// eslint-disable-next-line no-unused-vars\n    static info(...data) {\n        TraceUtils.logger.info.apply(TraceUtils.logger, Array.prototype.slice.call(arguments));\n    }\n\n    /**\n     *\n     * @static\n     * @param {*} data\n     */\n    // eslint-disable-next-line no-unused-vars\n    static warn(...data) {\n        TraceUtils.logger.warn.apply(TraceUtils.logger, Array.prototype.slice.call(arguments));\n    }\n\n    /**\n     *\n     * @static\n     * @param {...*} data\n     */\n    // eslint-disable-next-line no-unused-vars\n    static debug(...data) {\n        TraceUtils.logger.debug.apply(TraceUtils.logger, Array.prototype.slice.call(arguments));\n    }\n}\n\nTraceUtils.useLogger(new TraceLogger());\n"]}